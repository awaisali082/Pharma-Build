{"version":3,"file":"14.chunk.js","sources":["webpack:///./src/app/Medicine/Medicine.component.ts","webpack:///./src/app/Medicine/Medicine.module.ts","webpack:///./src/app/Medicine/Medicine.style.scss","webpack:///./src/app/Medicine/Medicine.template.html","webpack:///./src/app/models/MedicineModel.ts","webpack:///./src/app/models/PricePerQuantityModel.ts","webpack:///./src/app/services/AddMedicineService.ts","webpack:///./src/app/services/AdddosageService.ts","webpack:///./src/app/services/ServiceUrl.ts?af2c"],"sourcesContent":["import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Http, Headers, RequestOptions } from '@angular/http';\r\nimport { AddMedicineService } from './../services/AddMedicineService';\r\nimport { AddDosageService } from './../services/AdddosageService';\r\nimport { categoryModel } from './../models/categoryModel';\r\nimport { subcategoryModel } from './../models/subcategoryModel';\r\nimport { MeasurementModel } from './../models/MeasurementModel'\r\nimport { DosageModel } from './../models/DosageModel'\r\nimport { MedicineModel } from './../models/MedicineModel'\r\nimport { PricePerQuantityModel } from './../models/PricePerQuantityModel'\r\nimport { DosageSizesAndValueModel } from './../models/DosageSizesAndValueModel'\r\n\r\n@Component({\r\n  selector: 'Medicine',\r\n  providers: [AddMedicineService, AddDosageService],\r\n  styles: [require('./Medicine.style.scss')],\r\n  template: require('./Medicine.template.html'),\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'dosage-page app'\r\n  },\r\n})\r\nexport class MedicineComponent {\r\n  router: Router;\r\n  public MedicineDescription: any;\r\n  public MedicineName: any;\r\n  public ProductName: any;\r\n  public CategoryId: any;\r\n  public MedicineModelSingle: MedicineModel[] = [];\r\n  public PricePerQuantityModelSingle: PricePerQuantityModel[] = [];\r\n  public SinglePricePerQuantityModel: PricePerQuantityModel;\r\n  public SingleMedicineModel: MedicineModel;\r\n  public DosageSizesAndValueModel: DosageSizesAndValueModel[];\r\n  public ChemistId: any;\r\n  public SubCategoryId: any;\r\n  public ProductQuantity: any;\r\n  public ProductPrice: any;\r\n  public DosageId: any;\r\n  public DosageSizesValuesId: any;\r\n  public dosagename: String;\r\n  public dosagevalue: any;\r\n  public DosageModel: DosageModel[];\r\n  public MeasurementName: any;\r\n  public categoryModel: categoryModel;\r\n  public subCategoryModel: subcategoryModel[];\r\n  public MeasurementModel: MeasurementModel[];\r\n  public tempObj: MeasurementModel;\r\n  public SelectedMeasurementModel: MeasurementModel[] = [];\r\n  constructor(public _addMedicineService: AddMedicineService, router: Router, public _addDosageService: AddDosageService) {\r\n    this.router = router;\r\n    this.ChemistId = 1;\r\n    this._addMedicineService.getAllCategoryValues().subscribe(\r\n      response => {\r\n\r\n        this.categoryModel = response.data;\r\n\r\n      });\r\n\r\n\r\n\r\n    this._addMedicineService.getAllMeasurementValues().subscribe(\r\n      response => {\r\n\r\n        this.MeasurementModel = response.data;\r\n\r\n      });\r\n\r\n    this._addMedicineService.getAllDosageValues().subscribe(\r\n      response => {\r\n\r\n        this.DosageModel = response.data;\r\n\r\n      });\r\n\r\n  }\r\n  addsubCategory(name) {\r\n    this.SubCategoryId = name;\r\n    this.ChemistId = localStorage.getItem(\"chemistId\");\r\n\r\n\r\n\r\n  }\r\n  getDosageSizesAndValues(DosageId) {\r\n\r\n    console.log(DosageId);\r\n    this.DosageId = DosageId;\r\n    this._addDosageService.getDosageValue(this.DosageId).subscribe(\r\n      response => {\r\n        console.log(response);\r\n        this.DosageSizesAndValueModel = [];\r\n        for (var i = 0; i < response.data.length; i++) {\r\n\r\n          this.DosageSizesAndValueModel.push(response.data[i]);\r\n\r\n        }\r\n\r\n        console.log(this.DosageSizesAndValueModel);\r\n\r\n      });\r\n\r\n\r\n  }\r\n\r\n\r\n  populatePricePerQuantity() {\r\n    this.SinglePricePerQuantityModel = new PricePerQuantityModel();\r\n\r\n    this.SinglePricePerQuantityModel.Price = this.ProductPrice;\r\n    this.SinglePricePerQuantityModel.Quantity = this.ProductQuantity;\r\n    this.SinglePricePerQuantityModel.MeasurementId = this.MeasurementName;\r\n    this.SinglePricePerQuantityModel.DosageAndSizesValuesId = this.DosageSizesValuesId;\r\n    this.PricePerQuantityModelSingle.push(this.SinglePricePerQuantityModel);\r\n    console.log(this.SinglePricePerQuantityModel);\r\n\r\n  }\r\n  getDosageSizesAndValuesId(DosageSizesValuesId) {\r\n\r\n    this.DosageSizesValuesId = DosageSizesValuesId;\r\n\r\n\r\n  }\r\n\r\n  addMedicine() {\r\n    this.SingleMedicineModel = new MedicineModel();\r\n    this.ChemistId = 1;\r\n    this.SingleMedicineModel.ChemistId = this.ChemistId;\r\n    this.SingleMedicineModel.Quantity = this.ProductQuantity;\r\n    this.SingleMedicineModel.Price = this.ProductPrice;\r\n    this.SingleMedicineModel.DosageSizeAndValues = this.DosageId;\r\n    this.SingleMedicineModel.SubCategoryId = this.SubCategoryId;\r\n    this.SingleMedicineModel.MedicineName = this.MedicineName;\r\n    this.SingleMedicineModel.MeasurementModel = this.SelectedMeasurementModel;\r\n    this.MedicineModelSingle.push(this.SingleMedicineModel);\r\n\r\n    this._addMedicineService.AddMedicineAndDosageService(this.SingleMedicineModel, this.PricePerQuantityModelSingle).subscribe(\r\n      response => {\r\n        console.log(response);\r\n\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n    //this._addMedicineService.AddMedicineAndDosageService(this.ChemistId,this.MedicineName,this.MeasurementName,this.SubCategoryId,this.PricePerQuantityModel.DosageValue,this.PricePerQuantityModel.Quantity,this.PricePerQuantityModel.Price)\r\n\r\n  }\r\n  getMedicineCategoryId(CategoryId) {\r\n    this.CategoryId = CategoryId;\r\n    this._addMedicineService.getSubcategoryByCategoryID(this.ChemistId, this.CategoryId).subscribe(\r\n      response => {\r\n        console.log(response);\r\n\r\n        for (var i = 0; i < response.data.length; i++) {\r\n          if (response.data[i].ParentId == this.CategoryId) {\r\n            this.subCategoryModel = [];\r\n            this.subCategoryModel = response.data;\r\n          }\r\n        }\r\n\r\n        console.log(this.subCategoryModel);\r\n\r\n      });\r\n\r\n  }\r\n  addMeasurementName(MeasurementName) {\r\n    console.log(MeasurementName);\r\n    this.MeasurementName = MeasurementName;\r\n    this.SelectedMeasurementModel.push(this.MeasurementName);\r\n\r\n    this.tempObj = this.MeasurementModel.find(x => x.Id == MeasurementName);\r\n    console.log(this.tempObj);\r\n    //this.SelectedMeasurementModel.push(this.tempObj);\r\n    //var index = this.cart.findIndex(x => x.product.ID == elem);\r\n    //this.cart.splice(index, 1);\r\n\r\n  }\r\n\r\n  RemoveMeasurementValue(MeasurementName) {\r\n    console.log(MeasurementName);\r\n    var index = this.SelectedMeasurementModel.findIndex(x => x.Id == MeasurementName);\r\n    this.SelectedMeasurementModel.splice(index, 1);\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/Medicine/Medicine.component.ts","import { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { MedicineComponent } from './Medicine.component';\r\n\r\nexport const routes = [\r\n  { path: '', component:MedicineComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MedicineComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n  ]\r\n})\r\nexport default class MedicineModule {\r\n  static routes = routes;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/Medicine/Medicine.module.ts","module.exports = \".login-page {\\n  background-color: #ddd; }\\n\\n.login-page .page-footer {\\n  margin-bottom: 25px;\\n  font-size: 13px;\\n  color: #818a91;\\n  text-align: center; }\\n  @media (min-height: 600px) {\\n    .login-page .page-footer {\\n      position: absolute;\\n      bottom: 0;\\n      left: 0;\\n      right: 0; } }\\n\\n#MedicineCategory {\\n  height: 31px;\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef;\\n  width: 139px;\\n  margin-left: 29px;\\n  margin-bottom: 14px; }\\n\\n.AddMeasurement {\\n  position: relative;\\n  color: white;\\n  text-align: center;\\n  background-color: grey;\\n  float: left; }\\n\\n#AddMeasurement button {\\n  background: none;\\n  border: 1px solid #ccc;\\n  padding: 8px;\\n  font-weight: bold;\\n  width: auto;\\n  display: inline-block;\\n  margin-right: 10px;\\n  margin-top: 10px; }\\n\\n#MedicineDosage {\\n  height: 31px;\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef;\\n  width: 139px;\\n  margin-left: 37px; }\\n\\n#dosageValue {\\n  margin-bottom: 12px; }\\n\\n#SelectDosageValue {\\n  height: 31px;\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef;\\n  width: 139px;\\n  margin-left: 2px; }\\n\\n#MedicineMeasurement {\\n  height: 31px;\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef;\\n  width: 139px;\\n  margin-left: 2px; }\\n\\n#MedicineSubCategory {\\n  height: 31px;\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef;\\n  width: 167px;\\n  margin-left: 25px; }\\n\\n#measurementName {\\n  height: 31px;\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef;\\n  width: 100%;\\n  margin-bottom: 14px; }\\n\\n.addbtn {\\n  width: 235px;\\n  background-color: white; }\\n\\n.widget-login-container {\\n  padding-top: 10%; }\\n\\n.widget-login-logo {\\n  margin-top: 15px;\\n  margin-bottom: 15px;\\n  text-align: center;\\n  font-weight: 400; }\\n  .widget-login-logo .fa-circle {\\n    font-size: 13px;\\n    margin: 0 20px; }\\n\\n.widget-login {\\n  padding: 30px; }\\n  .widget-login > header h1, .widget-login > header h2, .widget-login > header h3, .widget-login > header h4, .widget-login > header h5, .widget-login > header h6 {\\n    font-weight: 400;\\n    text-align: center; }\\n\\n.widget-login-info {\\n  font-size: 13px;\\n  color: #888;\\n  margin-top: 1px;\\n  margin-bottom: 0;\\n  text-align: center; }\\n  .widget-login-info.abc-checkbox {\\n    margin-left: -25px; }\\n\\n.login-form .form-control {\\n  font-size: 13px;\\n  border: none;\\n  background-color: #eceeef; }\\n  .login-form .form-control:focus {\\n    background-color: #ddd; }\\n\\n#snackbar1 {\\n  visibility: hidden;\\n  /* Hidden by default. Visible on click */\\n  min-width: 250px;\\n  /* Set a default minimum width */\\n  margin-left: -125px;\\n  /* Divide value of min-width by 2 */\\n  background-color: #333;\\n  /* Black background color */\\n  color: #fff;\\n  /* White text color */\\n  text-align: center;\\n  /* Centered text */\\n  border-radius: 2px;\\n  /* Rounded borders */\\n  padding: 16px;\\n  /* Padding */\\n  position: fixed;\\n  /* Sit on top of the screen */\\n  z-index: 1;\\n  /* Add a z-index if needed */\\n  left: 50%;\\n  /* Center the snackbar */\\n  bottom: 30px;\\n  /* 30px from the bottom */ }\\n\\n#SelectMeasurement {\\n  display: inline-flex;\\n  margin-bottom: 3px; }\\n\\n#SelectDosage {\\n  display: inline-block; }\\n\\n#SelectCategory {\\n  display: inline-flex; }\\n\\n#SelectSubCategory {\\n  display: inline-flex; }\\n\\n.AddMedicine {\\n  max-width: 600px;\\n  min-width: 300px;\\n  margin: 0 auto; }\\n\\n.AddDosage {\\n  width: 297px; }\\n\\n.AddSize {\\n  width: 297px; }\\n\\n/* Show the snackbar when clicking on a button (class added with JavaScript) */\\n#snackbar1.show {\\n  visibility: visible;\\n  /* Show the snackbar */\\n  /* Add animation: Take 0.5 seconds to fade in and out the snackbar. \\r\\nHowever, delay the fade out process for 2.5 seconds */\\n  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\\n  animation: fadein 0.5s, fadeout 0.5s 2.5s; }\\n\\n/* Animations to fade the snackbar in and out */\\n@-webkit-keyframes fadein {\\n  from {\\n    bottom: 0;\\n    opacity: 0; }\\n  to {\\n    bottom: 30px;\\n    opacity: 1; } }\\n\\n@keyframes fadein {\\n  from {\\n    bottom: 0;\\n    opacity: 0; }\\n  to {\\n    bottom: 30px;\\n    opacity: 1; } }\\n\\n@-webkit-keyframes fadeout {\\n  from {\\n    bottom: 30px;\\n    opacity: 1; }\\n  to {\\n    bottom: 0;\\n    opacity: 0; } }\\n\\n@keyframes fadeout {\\n  from {\\n    bottom: 30px;\\n    opacity: 1; }\\n  to {\\n    bottom: 0;\\n    opacity: 0; } }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/Medicine/Medicine.style.scss\n// module id = ./src/app/Medicine/Medicine.style.scss\n// module chunks = 14","module.exports = \"<div id=\\\"snackbar1\\\"></div>\\r\\n<div class=\\\"row\\\">\\r\\n<div class=\\\"col-md-12\\\">\\r\\n<div class=\\\"container\\\">\\r\\n  <main id=\\\"content\\\" class=\\\"widget-login-container\\\" role=\\\"main\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n  \\r\\n        <h5 class=\\\"widget-login-logo animated  fadeInUp\\\">\\r\\n          <i class=\\\"fa fa-circle text-gray\\\"></i>\\r\\n          sing\\r\\n          <i class=\\\"fa fa-circle text-warning\\\"></i>\\r\\n        </h5>\\r\\n        <section class=\\\"widget widget-login AddMedicine animated fadeInUp\\\">\\r\\n          <header>\\r\\n            <h3 style=\\\"font-size:36px;font-weight:900\\\">ADD Medicine</h3>\\r\\n          </header>\\r\\n          <div class=\\\"widget-body\\\">\\r\\n            <p class=\\\"widget-login-info\\\">\\r\\n             \\r\\n            </p>\\r\\n            <p class=\\\"widget-login-info\\\">\\r\\n           \\r\\n            </p>\\r\\n            <form class=\\\"login-form mt-lg\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"MedicineName\\\" name=\\\"MedicineName\\\" id=\\\"exampleInputEmail1\\\" placeholder=\\\"Enter Medicine Name\\\">\\r\\n              </div>\\r\\n              \\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-6\\\">\\r\\n              <div class=\\\"form-group\\\" id=\\\"SelectCategory\\\">\\r\\n\\r\\n                <label style=\\\"font-size: 12px;\\\">Select Category</label>\\r\\n\\r\\n                <select id=\\\"MedicineCategory\\\"(change)=\\\"getMedicineCategoryId($event.target.value)\\\">\\r\\n                \\r\\n<option *ngFor=\\\"let Medicine of categoryModel\\\" value=\\\"{{Medicine.Id}}\\\">{{Medicine.CategoryName}}</option>\\r\\n                </select>   \\r\\n               \\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\" id=\\\"SelectSubCategory\\\" >\\r\\n                \\r\\n                                <label style=\\\"font-size: 12px;margin-left: -2px;\\\">Select Sub Category</label>\\r\\n                                <select id=\\\"MedicineSubCategory\\\" (change)=\\\"addsubCategory($event.target.value)\\\" >\\r\\n  <option *ngFor=\\\"let Medicine of subCategoryModel\\\" value=\\\"{{Medicine.Id}}\\\">{{Medicine.CategoryName}}</option>\\r\\n                                    \\r\\n                                </select>   \\r\\n                               \\r\\n                              </div>\\r\\n                              </div>\\r\\n                              <div class=\\\"col-md-6\\\">\\r\\n                              <div class=\\\"form-group\\\" id=\\\"SelectMeasurement\\\">\\r\\n                                \\r\\n                                                <label style=\\\"font-size: 12px;\\\">Select Measurement</label>\\r\\n                   <select id=\\\"MedicineMeasurement\\\" (change)=\\\"addMeasurementName($event.target.value)\\\">\\r\\n<option *ngFor=\\\"let Medicine of MeasurementModel\\\" value=\\\"{{Medicine.Id}}\\\">{{Medicine.MeasurementName}}</option>\\r\\n                                               \\r\\n                                                </select>   \\r\\n                                                \\r\\n                                              </div>\\r\\n                                            \\r\\n                                              <div class=\\\"form-group\\\" id=\\\"SelectDosage\\\">\\r\\n                                                  \\r\\n                                               <label style=\\\"font-size: 12px;\\\">SelectDosage</label>\\r\\n                                                     <select id=\\\"MedicineDosage\\\"(change)=\\\"getDosageSizesAndValues($event.target.value)\\\">\\r\\n <option *ngFor=\\\"let Dosage of DosageModel\\\" value=\\\"{{Dosage.Id}}\\\">{{Dosage.UnitName}}</option>\\r\\n                                                                 \\r\\n                                                                  </select>   \\r\\n                                                                  \\r\\n                                                                </div>\\r\\n                                                                </div>\\r\\n                                                                \\r\\n                                                                </div>\\r\\n               <div class=\\\"row\\\">\\r\\n               <div class=\\\"col-md-6\\\" id=\\\"dosageValue\\\">\\r\\n               <label style=\\\"font-size: 12px;\\\">SelectDosageValue</label>\\r\\n               <select id=\\\"SelectDosageValue\\\" (change)=\\\"getDosageSizesAndValuesId($event.target.value)\\\">\\r\\n               <option *ngFor=\\\"let Dosage of DosageSizesAndValueModel\\\" value=\\\"{{Dosage.Id}}\\\">{{Dosage.Value}}</option>\\r\\n               </select>   \\r\\n               </div>\\r\\n             \\r\\n               </div>\\r\\n                                              \\r\\n                               \\r\\n             \\r\\n                              <div class=\\\"form-group\\\">\\r\\n                              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"ProductQuantity\\\" name=\\\"ProductQuantity\\\" id=\\\"exampleInputEmail1\\\" placeholder=\\\"Enter Product Quantity\\\">\\r\\n                              </div>\\r\\n                              <div class=\\\"form-group\\\">\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"ProductPrice\\\" name=\\\"ProductPrice\\\" id=\\\"exampleInputEmail1\\\" placeholder=\\\"Enter Product Price\\\">\\r\\n                              </div>\\r\\n                             \\r\\n                              <div class=\\\"col-md-6\\\" >\\r\\n                                  <a class=\\\"btn addbtn btn-inverse btn-sm\\\" (click)=\\\"populatePricePerQuantity()\\\">Add</a>\\r\\n                                  </div>     \\r\\n                                \\r\\n              \\r\\n\\r\\n              <table class=\\\"table table-hover\\\">\\r\\n                  \\r\\n                      <tr>\\r\\n                          <td>Dosage Value/Size</td>\\r\\n                          <td>Measurement Name</td>\\r\\n                          <td>Product Quantity</td>\\r\\n                          <td>Product Price</td>\\r\\n                      </tr>\\r\\n                     \\r\\n                    <tr  *ngFor=\\\"let row of PricePerQuantityModel\\\">\\r\\n                        \\r\\n                        <td>{{row.DosageAndSizesValuesId}}</td>\\r\\n                        <td>{{row.MeasurementId}}</td>\\r\\n                        <td>{{row.Quantity}}</td>\\r\\n                        <td>{{row.Price}}</td>\\r\\n\\r\\n                    </tr>\\r\\n                  \\r\\n                     \\r\\n                  \\r\\n                  \\r\\n              </table> \\r\\n              <div class=\\\"clearfix\\\">\\r\\n                  <div class=\\\"btn-toolbar pull-xs-right m-t-1\\\">\\r\\n                  <!--   <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-sm\\\">Create an Account</button> -->\\r\\n                    <a class=\\\"btn addbtn btn-inverse btn-sm\\\" (click)=\\\"addMedicine()\\\">Add</a>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n              <div class=\\\"row m-t-1\\\">\\r\\n                <div class=\\\"col-md-6 push-md-6\\\">\\r\\n                  <div class=\\\"clearfix\\\">\\r\\n                   <!--  <div class=\\\"abc-checkbox widget-login-info pull-xs-right\\\">\\r\\n                      <input type=\\\"checkbox\\\" id=\\\"checkbox1\\\" value=\\\"1\\\">\\r\\n                      <label for=\\\"checkbox1\\\">Keep me signed in </label>\\r\\n                    </div> -->\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n               <!--  <div class=\\\"col-md-6 pull-md-6\\\">\\r\\n                  <a class=\\\"mr-n-lg\\\" href=\\\"#\\\">Trouble with account?</a>\\r\\n                </div> -->\\r\\n                   </div>\\r\\n               </form>\\r\\n              </div>\\r\\n             </section>\\r\\n     \\r\\n        </div>\\r\\n  </main>\\r\\n <!--  <footer class=\\\"page-footer\\\">\\r\\n    2016 &copy; Sing. Admin Dashboard Template.\\r\\n  </footer> -->\\r\\n      </div>\\r\\n     </div>\\r\\n    </div>\\r\\n  \\r\\n  \\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/Medicine/Medicine.template.html\n// module id = ./src/app/Medicine/Medicine.template.html\n// module chunks = 14","import {MeasurementModel} from './MeasurementModel'\r\nimport {PricePerQuantityModel} from './PricePerQuantityModel'\r\nexport class MedicineModel {\r\n    ChemistId:any;\r\n    MedicineName: any;\r\n    Quantity: number;\r\n    Price: number;\r\n    DosageSizeAndValues: any;\r\n    CategoryId: number;\r\n    SubCategoryId: number;\r\n    MeasurementModel:MeasurementModel[];\r\n    PricePerQuantity:PricePerQuantityModel[]\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/models/MedicineModel.ts","export class PricePerQuantityModel{\r\n    DosageAndSizesValuesId:number;\r\n    Quantity: number;\r\n    Price: number;\r\n    MeasurementId:any;\r\n    \r\n \r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/models/PricePerQuantityModel.ts","import { Injectable, Inject } from '@angular/core';\r\nimport { Http, Headers, RequestOptions } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { ServiceUrl } from './ServiceUrl';\r\n@Injectable()\r\nexport class AddMedicineService {\r\n    urlService = new ServiceUrl();\r\n    constructor(private http: Http) {\r\n\r\n    }\r\n \r\n    getAllCategoryValues()\r\n    {\r\n        let body = JSON.stringify({});\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getAllCategoriesAndSubCategories\", options)\r\n            .map(res => res.json());\r\n\r\n    }\r\n    getAllSubCategoryValues()\r\n    {\r\n        let body = JSON.stringify({ });\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getAllCategoriesAndSubCategories\", options)\r\n            .map(res => res.json());\r\n\r\n\r\n    }\r\n    getAllDosageValues()\r\n    {\r\n        let body = JSON.stringify({});\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getAllChemistUnits\",options)\r\n            .map(res => res.json());\r\n\r\n    }\r\n    getSubcategoryByCategoryID(chemistId,categoryId){\r\n        let body = JSON.stringify({});\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getSubCategoriesByChemistIdByCategoryId?chemistId=\"+chemistId+\"&categoryId=\"+categoryId, options)\r\n            .map(res => res.json());\r\n    }\r\n    getAllMeasurementValues()\r\n    {\r\n        let body = JSON.stringify({});\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getAllChemistMeasurements\", options)\r\n            .map(res => res.json());\r\n\r\n        \r\n    }\r\n   AddMedicineAndDosageService(SingleMedicineModel,PricePerQuantityModel)\r\n    {\r\n\r\n\r\n      \r\nlet body = JSON.stringify({ ChemistId:SingleMedicineModel.ChemistId,DosageSizeAndValues:SingleMedicineModel.DosageSizeAndValues,Name: SingleMedicineModel.MedicineName, MeasurementIds:SingleMedicineModel.MeasurementModel,SubCategoryId:SingleMedicineModel.SubCategoryId,AddProductDaosageAndSizeMappingDTO:PricePerQuantityModel});\r\nconsole.log(body);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'post', headers: headers });\r\n\r\n        return this.http.post(this.urlService.baseUrl + \"Chemist/addProduct\", body, options)\r\n            .map(res => res.json());\r\n        \r\n    } \r\n\r\n   \r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/services/AddMedicineService.ts","import { Injectable, Inject } from '@angular/core';\r\nimport { Http, Headers, RequestOptions } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { ServiceUrl } from './ServiceUrl';\r\n@Injectable()\r\nexport class AddDosageService {\r\n    urlService = new ServiceUrl();\r\n    constructor(private http: Http) {\r\n\r\n    }\r\n    getDosageValue(DosageId)\r\n    {\r\n        let body = JSON.stringify({Id:DosageId});\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getDosageAndSizeValuesByDosageAndSizeId?dosageAndSizeId=1\", options)\r\n            .map(res => res.json());\r\n\r\n    }\r\n    addunit(unitname, unitvalue) {\r\n        let body = JSON.stringify({ UnitName: unitname, UnitSymbol: unitvalue });\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'post', headers: headers });\r\n\r\n        return this.http.post(this.urlService.baseUrl + \"Chemist/addUnit\", body, options)\r\n            .map(res => res.json());\r\n    }\r\n    getAllUnitValues()\r\n    {\r\n        let body = JSON.stringify({});\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'get', headers: headers });\r\n\r\n        return this.http.get(this.urlService.baseUrl + \"Chemist/getAllUnitValues\", options)\r\n            .map(res => res.json());\r\n\r\n    }\r\n    addUnitValues(unitId,dosagevalue)\r\n    {\r\n        let body = JSON.stringify({ DosageAndSizesId: unitId, Value: dosagevalue });\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ method: 'post', headers: headers });\r\n\r\n        return this.http.post(this.urlService.baseUrl + \"Chemist/addUnitValue\", body, options)\r\n            .map(res => res.json());\r\n\r\n    }\r\n   \r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/services/AdddosageService.ts","import { Injectable, Inject } from '@angular/core';\nexport class ServiceUrl {\n   public baseUrl: string = \"http://pharmaideo.azurewebsites.net/api/\";\n/*    public baseUrl:string = \"http://localhost:5000/\";*/\n/* public baseUrl: string = \"http://104.199.49.55:3000/\";*/\n    constructor() {\n\n    }\n    getUrl() {\n        return this.baseUrl;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/services/ServiceUrl.ts"],"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AAKA;AACA;AAaA;AA0BA;AA1BA;AA0BA;AAAA;AApBA;AACA;AAkBA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAGA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA1KA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAqKA;;AAAA;AApKA;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAYA;AAAA;AAEA;AADA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AAFA;AAEA;;;;;;;;ACvBA;;;;;;;ACAA;;;;;;;;;ACEA;AAAA;AAUA;AAAA;AAAA;AAVA;;;;;;;;;;ACFA;AAAA;AAOA;AAAA;AAAA;AAPA;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAtEA;AAAA;;AAAA;AAyEA;;AAAA;AAxEA;;;;;;;;;;ACLA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AA3CA;AAAA;;AAAA;AA6CA;;AAAA;AA5CA;;;;;;;;;;ACJA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAVA;;;;;","sourceRoot":""}